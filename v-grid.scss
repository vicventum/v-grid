// Breakpoints
$breakpoints: ('': 0,
    m: 640px,
    t: 768px,
    l: 1024px,
    d: 1280px) !default;

// Vars
$max-cols: 12;
$max-rows: 6;
$responsiveSign: \:;

// Functions
@function checkAxis($axis) {
    @if $axis==col or $axis==cols {
        @if $axis==col {
            @return column;
        }
        @else {
            @return columns;
        }

    }
    @else {
        @return #{$axis};
    }
}

@function checkAlign($align) {
    @if $align==j {
        @return justify;
    }
    @else {
        @return align;
    }
}


// Responsive -----------------------------------
@each $sizeName,
$size in $breakpoints {
    @media screen and (min-width: $size) {
        @if $sizeName=='' {
            $responsiveSign: '';
        }
        @else {
            $responsiveSign: \:;
        }

        // Display ==========================================
        .#{$sizeName}#{$responsiveSign}v-inline-grid {
            display: inline-grid;
        }

        .#{$sizeName}#{$responsiveSign}v-grid {
            display: grid;
        }
        .#{$sizeName}#{$responsiveSign}v-inline-flex {
            display: inline-flex;
        }
        .#{$sizeName}#{$responsiveSign}v-flex {
            display: flex;
        }

        // Gap's ================================================
        @for $i from 0 through 10 {

            @if round($i / 2)==$i / 2 {

                // Comprueba si es decimal
                .#{$sizeName}#{$responsiveSign}gap-#{$i / 2} {
                    gap: ($i / 2) * 1rem;
                }

                .#{$sizeName}#{$responsiveSign}col-gap-#{$i / 2} {
                    column-gap: ($i / 2) * 1rem;
                }

                .#{$sizeName}#{$responsiveSign}row-gap-#{$i / 2} {
                    row-gap: ($i / 2) * 1rem;
                }

            }@else {

                $var: round($i / 2) - 1;

                .#{$sizeName}#{$responsiveSign}gap-#{$var}\,5 {
                    gap: ($i / 2) * 1rem;
                }

                .#{$sizeName}#{$responsiveSign}col-gap-#{$var}\,5 {
                    column-gap: ($i / 2) * 1rem;
                }

                .#{$sizeName}#{$responsiveSign}row-gap-#{$var}\,5 {
                    row-gap: ($i / 2) * 1rem;
                }
            }
        }

        // grid-template-colums grid-template-rows  | grid-column, grid-column-start, grid-column-end, grid-row, grid-row-start, grid-row-end
        @for $i from 0 through $max-cols {

            // grid-template-colums grid-template-rows 
            @each $axis in (cols, rows) {
                $value: checkAxis($axis);

                @if $i==0 {
                    .#{$sizeName}#{$responsiveSign}grid-#{$axis}-none {
                        grid-template-#{$value}: none;
                    }
                } @else {
                    .#{$sizeName}#{$responsiveSign}grid-#{$axis}-#{$i} {
                        grid-template-#{$value}: repeat($i, minmax(0, 1fr));
                    }
                }
            }

            // grid-span
            @each $axis in (col, row) {
                $value: checkAxis($axis);

                @if $i > 0 {
                    .#{$sizeName}#{$responsiveSign}#{$axis}-span-#{$i} {
                        grid-#{$value}: span $i / span $i;
                    }
                }
            }
        }

        // grid-auto-flow =====================================
        @each $axis in (row, col) {
            $value: checkAxis($axis);

            .#{$sizeName}#{$responsiveSign}grid-flow-#{$axis} {
                grid-auto-flow: #{$value};
            }

            .#{$sizeName}#{$responsiveSign}grid-flow-#{$axis}-dense {
                grid-auto-flow: #{$value} dense;
            }
        }

        // Alignment ===================================================
        // justify-items:   start | end | center | stretch;
        // align-items:     start | end | center | stretch;
        // justify-self:   start | end | center | stretch;
        // align-self:     start | end | center | stretch;
        // justify-content: start | end | center | stretch | space-around | space-between | space-evenly; 
        // align-content:   start | end | center | stretch | space-around | space-between | space-evenly;  
        @each $align in (j, a) {
            @each $mode in (items, content, self) {
                $alignName: checkAlign($align);

                @each $value in (start, end, center, stretch) {
                    .#{$sizeName}#{$responsiveSign}#{$align}-#{$mode}-#{$value} {
                        #{$alignName}-#{$mode}: $value;
                    }
                }

                @if $mode==content {
                    @each $value in (around, between, evenly) {
                        .#{$sizeName}#{$responsiveSign}#{$align}-#{$mode}-#{$value} {
                            #{$alignName}-#{$mode}: space-#{$value};
                        }
                    }
                }
            }
        }

        // v-flex ==================================================
      
        // flex-direction =========================================
        @each $axis in (col, row) {
            $value: checkAxis($axis);
            .flex-#{$axis} {
                flex-direction: $value;
            }
            .flex-#{$axis}-reverse {
                flex-direction: #{$value}-reverse;
            }
        }

        // flex-wrap ====================================================
        @each $value in (wrap, wrap-reverse, nowrap) {
            .flex-#{$value} {
                flex-wrap: $value;
            }
        }

        // flex ====================================================
        @each $name, $value in (1: 1 1 0%, auto: 1 1 auto, initial: 0 1 auto, none: none) {
            .flex-#{$name} {
                flex: $value;
            }
        }
        // flex-grow, flex-shrink =======================================
        @each $name in (grow, shrink) {
            @for $value from 0 through 1 {
                $nameValue: '-#{$value}';
                @if $nameValue == '-1' {$nameValue: ''}
                .flex-#{$name}#{$nameValue} {
                    flex-#{$name}: $value;
                }        
            }
        }

        // order =========================================================
        @for $i from 0 through 12 {
            @if $i == 0 {
                @each $name, $value in (first: -9999, last: 9999, none: 0) {
                    .order-#{$name} {
                        order: $value
                    }
                }
            }
            .order-#{$i} {
                order: $i
            }
        }
        // width =========================================================
        @for $i from 1 through 12 {
            @if $i <= 6 or $i == 12 {
                @if $i == 1 {
                    @each $name, $value in (0: 0, auto: auto, full: 100%, screen: 100vw) {
                        .w-#{$name} {
                            width: $value;
                        }
                    }
                } @else {
                    @for $j from 1 to $i {
                        .w-#{$j}\/#{$i} {
                            width: ($j / $i) * 100%;
                        }
                    }
                }
            }
        }

        // height =========================================================
        @each $name, $value in (0: 0, auto: auto, full: 100%, screen: 100vh) {
            .h-#{$name} {
                height: $value;
            }
        }
    }
}


// FIXME: Responsive para solucionar el conflicto de colum-span con colum-start -----------------------------------
// grid-column, grid-column-start, grid-column-end, grid-row, grid-row-start, grid-row-end
@each $sizeName,
$size in $breakpoints {
    @media screen and (min-width: $size) {

        @for $i from 0 through $max-cols {
            
            @each $axis in (col, row) {
                $value: checkAxis($axis);

                @if $i == 0 {
                    .#{$sizeName}#{$responsiveSign}#{$axis}-auto {
                        grid-#{$value}: auto;
                    }
                    @each $name in (start, end) {
                        .#{$sizeName}#{$responsiveSign}#{$axis}-#{$name}-13 {
                            grid-#{$value}-#{$name}: 13;
                        }
                        .#{$sizeName}#{$responsiveSign}#{$axis}-#{$name}-auto {
                            grid-#{$value}-#{$name}: auto;
                        }
                    }
                }
                @each $name in (start, end) {
                    
                    .#{$sizeName}#{$responsiveSign}#{$axis}-#{$name}-#{$i} {
                        grid-#{$value}-#{$name}: $i;
                    }
                }
            }
        }
    }
}